---
import type { NavItem } from "../types";
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";
import pieriaLogoSmall from '../assets/pieria_logo_einzeln_klein.jpeg';

const navItems: Array<NavItem> = [
  { title: "Produkt", url: "#product" },
  { title: "Team", url: "#team" },
  { title: "Prozess", url: "#process" },
  {title: "Region", url: "#region"}
];
---

<header
  id="page-header"
  class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
>
<a class="flex items-center gap-3 hover:!text-default" href="#">
  <Image

        src={pieriaLogoSmall}
        loading="eager"
        height={40}
        width={40}
        fit={'contain'}
        alt="Toxos finest"
      />
  
</a>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url }) => (
              <li>
                <a class="text-sm" href={url}>
                  {title}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url }) => (
                  <li>
                    <a class="block py-4 text-center text-xl" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    console.log(d);
    header.classList.toggle("fixed-header", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    position: fixed !important;
    bottom: auto !important;
    top: 0 !important;
    background-color: black !important;
  }
  .modal.is-open {
    @apply block;
  }
</style>
